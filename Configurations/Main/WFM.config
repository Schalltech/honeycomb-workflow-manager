<Manager xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ApplicationVariables>

    <!--WFM Required Variables-->
    <Variable Name="ApplicationName"          Value=""/>
    <Variable Name="WFMHelpPath"              Value=""/>
    <Variable Name="LogFileCategory"          Value=""/>
    <Variable Name="TempFileDirectory"        Value=".\Temp\"/>
    <Variable Name="ExcelTemplateDirectory"   Value=".\Templates\Excel\"/>
    <Variable Name="XsltTemplateDirectory"    Value=".\Templates\XSLT\"/>
    
    <!--Install Shield Modified Variables-->
    <Variable Name="ServerName"      Value="LOCAL"/>
    
    <!-- LAN Paths -->    
    <Variable Name="ServicesPath"	            Value="C:\WFM\Services\"/>
    <Variable Name="LocalPath"	              Value="C:\THDProjects\honeycomb-workflow-manager\local"/>
    
    <!-- MISC Oracle Configuration Section -->
    <Variable Name="GCC_MSSQL_DB"             Value="MSSQL_GCC_QA1"/>

    <!-- Sharepoint Paths -->
    <Variable Name="SharepointPath"           Value="http://intra.schalltech.com/home/"/>
    <Variable Name="SharepointFolder"         Value="Reports/"/>

    <Variable Name="ProductID" Value="538458" />

  </ApplicationVariables>

			CommandLineArguments are the values passed in via the command line when the application is started
			These values are internally stored into a data table named DefaultSettings. The value's of the command
			line arguments can be accessed through special commands. You reference the table and the name of the
			argument
			
			%DefaultSettings.ProcessName% = Name of the process
			%DefaultSettings.ProcessType% = Type of process being generated.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
			%DefaultSettings.CurrentDate% = The current date
			%DefaultSettings.StartDate%   = The starting date corrisponding with the process data.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
			%DefaultSettings.EndDate%     = The ending date corrisponding with the process data
			%DefaultSettings.ProcessDate% = The date the process was ran
			%DefaultSettings.MachineName% = The name of the machine hosting the process
			-->
  <CommandLineArguments>
    <Command Argument="/p"    Name="ProcessName" DataType="String"	Required="true"		/>
    <Command Argument="/c"    Name="CurrentDate" DataType="Date"		Required="false"	/>
    <Command Argument="/s"    Name="StartDate"   DataType="Date"		Required="false"	/>
    <Command Argument="/e"    Name="EndDate"		 DataType="Date"		Required="false"	/>
    <Command Argument="/t"    Name="ProcessType" DataType="String"	Required="false"	DefaultValue="Daily" Values="Daily,Weekly,MonthlyFirstToFirst,AdHoc,WeeklyFridayToFriday,WeeklySaturdayToSaturday,WeeklySundayToSunday,WeeklyMondayToMonday,YearlyFirstToFirst" />
    <Command Argument="/arg1" Name="Arg1"        DataType="String"  Required="false"	/>
    <Command Argument="/arg2" Name="Arg2"        DataType="String"  Required="false"	/>
    <Command Argument="/arg3" Name="Arg3"        DataType="String"  Required="false"	/>
    <Command Argument="/arg4" Name="Arg4"        DataType="String"  Required="false"	/>
    <Command Argument="/arg5" Name="Arg5"        DataType="String"  Required="false"	/>
    <Command Argument="/arg6" Name="Arg6"        DataType="String"  Required="false"	/>
    <Command Argument="/arg7" Name="Arg7"        DataType="String"  Required="false"	/>
  </CommandLineArguments>
  
  <!--These are modules that will run before a process begins.-->
  <PreProcess>
    <Modules>
      
    </Modules>
  </PreProcess>
  
  <!--These are modules that will run after a process completes.-->
  <PostProcess>
    <Modules>
      
    </Modules>
  </PostProcess>
  
  <Processes>

    <Process Name="EXPORT_CHOICE_TAGS"	Enabled="true">
      <LogCategory Name="%DefaultSettings.ProcessName%">
        <Appender xsi:type="RollingFileAppenderConfiguration" FileName="Rpt - %DefaultSettings.ProcessName%.log" />
      </LogCategory>
      <Exception>
        <Application>WFM</Application>
        <Environment>%ApplicationVariables.Environment%</Environment>
        <ExceptionCode>29999</ExceptionCode>
        <StatusCode>1</StatusCode>
        <SeverityCode>3</SeverityCode>
      </Exception>
      <TempFileDirectory>%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\</TempFileDirectory>
      <Modules>

        <!--RETRIEVE OPTION INFORMATION-->
        <Database Name="DatabaseModule">
          <Commands>
            <Command RunIndex="1" Name="Command1" Type="TEXT"	Enabled="true"
                     Text="SELECT --o.OptionId,
	                                --o.InternalName,
	                                p.ChoiceId,
                                  p.InternalName,
	                                p.ShortLabel,
	                                --p.LongLabel,
	                                (SELECT SUBSTRING((SELECT ',' + t.TagValue AS 'data()'
			                                                 FROM (SELECT t.TagValue
							                                                 FROM [dbo].[Choices] c,
									                                                  [dbo].[ChoiceTags] ct,
										                                                [dbo].[Tags] t
								                                              WHERE c.ChoiceId = p.ChoiceId	
									                                              AND ct.ChoiceId = c.ChoiceId   
									                                              AND t.TagId = ct.TagId) t
									                                          FOR XML PATH('')), 2 , 9999)
	                                ) AS Tags
                             FROM [dbo].[Options] o,
                                  [dbo].[Choices] p
                            WHERE 1=1
                              AND o.InternalName = '%DefaultSettings.Arg1%'
                              AND p.OptionId = o.OptionId"	>
              <Reader>OptionDetails</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
          </Commands>
        </Database>
        
        <!--WRITE THE OPTION DATA TO EXCEL-->
        <ExcelWriter Name="Extract" TemplateName="%ApplicationVariables.ExcelTemplateDirectory%OptionExport.xls" FileName="Option %DefaultSettings.Arg1% Extract - %DefaultSettings.StartDate|MM-dd-yyyy HH.mm%.xls" AllowEmptyReport="true" Method="disk">
          <Worksheets>
            <Worksheet SheetNumber="0" AutoFitColumns="true" StartColumn="B" StartRow="7" IgnoreContent="false">
              <SourceDataTable Name="OptionDetails" />
            </Worksheet>
          </Worksheets>
        </ExcelWriter>
        
        <!--EMAIL THE EXTRACT-->
        <EmailPoster Name="Emailer" Enabled="true">
          <SendEmail>true</SendEmail>
          <To>eric_j_schall@homedepot.com</To>
          <From>honeycomb@schalltech.com</From>
          <Subject>Option Extract</Subject>
          <Body>Please see attached.</Body>
          <Attachment Name="%Extract.FileName%" Path="%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\"/>
        </EmailPoster>

        <!--MOVE THE PROCESSED IMPORT FILE TO THE LOADED FOLDER-->
        <LanPoster Name="LoadedFiles" Enabled="True">
          <DrivingModule Name="Extract"/>
          <FileName>%Extract.FileName%</FileName>
          <Destinations>
            <Destination Path="%ApplicationVariables.ServicesPath%choice_tag_import/pending" />
          </Destinations>
        </LanPoster>

        <!--CLEANUP-->
        <LanCleaner Name="Cleanup" Enabled="false">
          <FileDeletions>
            <FileDeletion FileName="*.*" />
          </FileDeletions>
        </LanCleaner>

      </Modules>
      <ReportEmail>
        <IT_Success></IT_Success>
        <IT_Failure></IT_Failure>
        <ClientSuccess></ClientSuccess>
        <ClientFailure></ClientFailure>
        <SubjectSuccess>%DefaultSettings.ProcessName% COMPLETED</SubjectSuccess>
        <SubjectFailure>%DefaultSettings.ProcessName% ERROR</SubjectFailure>
      </ReportEmail>
    </Process>

    <Process Name="IMPORT_CHOICE_TAG"	Enabled="true">
      <LogCategory Name="%DefaultSettings.ProcessName%">
        <Appender xsi:type="RollingFileAppenderConfiguration" FileName="Rpt - %DefaultSettings.ProcessName%.log" />
      </LogCategory>
      <Exception>
        <Application>WFM</Application>
        <Environment>%ApplicationVariables.Environment%</Environment>
        <ExceptionCode>29999</ExceptionCode>
        <StatusCode>1</StatusCode>
        <SeverityCode>3</SeverityCode>
      </Exception>
      <TempFileDirectory>%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\</TempFileDirectory>
      <Modules>
        
        <!--RETRIEVE EXCEL EXTRACT FILE-->
        <LanCollector Name="FileCollector" Directory="%ApplicationVariables.ServicesPath%%DefaultSettings.ProcessName%\Pending" MaxCount="1" Enabled="true">
          <SourceFiles>
            <SourceFile Name="*.xls" Unzip="true"/>
          </SourceFiles>
        </LanCollector>
        
        <!--LOAD EXTRACT FILE-->
        <ExcelReader Name="ChoiceData" PageIndex="0"  Enabled="true">
          <File Name="%FileCollector.FileName%" />
        </ExcelReader>
        
        <!--UPDATE DATABASE WITH EXTRACT DATA-->
        <Database Name="DatabaseModule" Enabled="true">
          <Commands>

            <Command RunIndex="1" Name="PreTagCommand" Type="TEXT"	Enabled="true"
                         Text="
                       
                               SELECT t.TagId,
                                      t.TagValue,
                                      'PRE' AS Timing
                                 FROM [dbo].[Options] o,
                                      [dbo].[Choices] c,
                                      [dbo].[ChoiceTags] ct,
                                      [dbo].[Tags] t
                                WHERE o.InternalName = 'Color_538458'
                                  AND c.OptionId = o.OptionId	
                                  AND ct.ChoiceId = c.ChoiceId   
                                  AND t.TagId = ct.TagId">
              <Reader>PreTagCount</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
            
            <!-- 1. CONVERT DELIMITED STRING OF TAG VALUES FROM EXCEL INTO ROWS
                 2. ADD ANY NEW TAGS TO THE DB
                 3. CAPTURE THE CORRESPONDING TAG IDS-->
            <Command RunIndex="2" Name="ConvertTagsCommand" Type="TEXT"	Enabled="true"
                     Text="
                           
                           DECLARE @Result TABLE (ChoiceId INT, TagId INT, TagValue VARCHAR(100), IsNew BIT)
                           DECLARE @CommadelimitedString VARCHAR(1000)
                           DECLARE @IntLocation INT
                           DECLARE @TagId INT
                           DECLARE @IsNew BIT
                           DECLARE @TagValue VARCHAR(100)

                           SET @CommadelimitedString = '%ChoiceData.Tags%'

                           WHILE (CHARINDEX(',', @CommadelimitedString, 0) > 0)
                               BEGIN
                                   SET @IntLocation = CHARINDEX(',', @CommadelimitedString, 0)
                                   SET @TagValue = RTRIM(LTRIM(SUBSTRING(@CommadelimitedString,   0, @IntLocation)))
                                   SET @IsNew = 0
                                   
                                   IF NOT(@TagValue = '')
                                       BEGIN
                                           SET @TagId = (SELECT TagId FROM [dbo].[Tags] WHERE TagValue = @TagValue)
                                            
                                           IF @TagId IS NULL
                                               BEGIN
                                                   INSERT INTO [dbo].[Tags] (TagValue, Protected) VALUES (@TagValue, 0)
                                                   
                                                   SET @TagId = (SELECT TagId FROM [dbo].[Tags] WHERE TagValue = @TagValue)
                                                   
                                                   SET @IsNew = 1
                                               END
                                               
                                           INSERT INTO @Result (ChoiceId, TagId, TagValue, IsNew)
                                               VALUES(%ChoiceData.Choice ID%, @TagId, @TagValue, @IsNew)
                                       END
                                       
                                   SET @CommadelimitedString = STUFF(@CommadelimitedString,   1, @IntLocation,   '')
                               END
                             
                           SET @TagValue = RTRIM(LTRIM(@CommadelimitedString))
                           SET @IsNew = 0
                           
                           IF NOT(@TagValue = '')
                               BEGIN
                                   SET @TagId = (SELECT TagId FROM [dbo].[Tags] WHERE TagValue = @TagValue)

                                   IF @TagId IS NULL
                                       BEGIN
                                           INSERT INTO [dbo].[Tags] (TagValue, Protected) VALUES (@TagValue, 0)
                                                   
                                           SET @TagId = (SELECT TagId FROM [dbo].[Tags] WHERE TagValue = @TagValue)
                                                   
                                           SET @IsNew = 1
                                       END
                                               
                                   INSERT INTO @Result (ChoiceId, TagId, TagValue, IsNew)
                                       VALUES(%ChoiceData.Choice ID%, @TagId, @TagValue, @IsNew)
                               END
                               
                           SELECT * FROM @Result
                           ">
              <DrivingModule Name="ChoiceData">
                <Filter Expression="NOT(Tags = '')"  />
              </DrivingModule>
              <Reader>ChoiceTags</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
            
            <!--DELETE ALL CHOICE TAGS FOR THIS OPTION-->
            <Command RunIndex="3" Name="DeleteTagsCommand" Type="TEXT" Enabled="true"
                     Text="DELETE FROM [dbo].[ChoiceTags] WHERE ChoiceId = %ChoiceData.Choice ID%">
              <DrivingModule Name="ChoiceData">
                <Filter Expression="NOT('Choice ID' = '')"  />
              </DrivingModule>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
            
            <!--UPDATE TAGS TO ALL CHOICES FOR THIS OPTION-->
            <Command RunIndex="4" Name="AssoiateTagsCommand" Type="TEXT"	Enabled="true"
                     Text="INSERT INTO [dbo].[ChoiceTags] (TagId, ChoiceId) VALUES (%ChoiceTags.TagId%, %ChoiceTags.ChoiceId%)"	>
              <DrivingModule Name="ChoiceTags" />
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>            
            
            <Command RunIndex="5" Name="PostTagCommand" Type="TEXT"	Enabled="true"
                         Text="
                       
                               SELECT t.TagId,
                                      t.TagValue,
                                      'POST' AS Timing
                                 FROM [dbo].[Options] o,
                                      [dbo].[Choices] c,
                                      [dbo].[ChoiceTags] ct,
                                      [dbo].[Tags] t
                                WHERE o.InternalName = 'Color_538458'
                                  AND c.OptionId = o.OptionId	
                                  AND ct.ChoiceId = c.ChoiceId   
                                  AND t.TagId = ct.TagId">
              <Reader>PostTagCount</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
          
          </Commands>
        </Database>
        
        <!--TRANSFORM DATA TO HTML BODY-->
        <XsltWriter Name="NotificationEmail" TemplateName="%ApplicationVariables.XsltTemplateDirectory%%DefaultSettings.ProcessName%.xslt" FileName="%DefaultSettings.ProcessName%.html" AllowEmptyReport="true" Method="disk" OutputType="html" Enabled="true"  >
          <Arguments>
            <Argument Name="EmailTitle" Value="Choice Tag Import"/>
            <Argument Name="RunDate"    Value="%DefaultSettings.CurrentDate%"/>
            <Argument Name="FileName"   Value="%FileCollector.FileName%"/>
            <Argument Name="StartDate"  Value="%DefaultSettings.StartDate%"/>
            <Argument Name="EndDate"    Value="%DateTimeNow%"/>
          </Arguments>
          <SourceDataTable Name="ChoiceTags" />
          <DestinationDataTable Name="EmailBody">
            <DataColumns>
              <Column Name="RawReport" DataType="Byte[]" Value="%RawReport%" />
            </DataColumns>
          </DestinationDataTable>
        </XsltWriter>
        
        <!--SEND NOTIFICATION EMAIL-->
        <EmailPoster Name="Emailer" Enabled="true">
          <SendEmail>true</SendEmail>
          <To>eric_j_schall@homedepot.com</To>
          <From>honeycomb@schalltech.com</From>
          <Subject>Choice Tag Import</Subject>
          <Body>%EmailBody.RawReport%</Body>
        </EmailPoster>
        
        <!--CLEANUP-->
        <LanCleaner Name="Cleanup" Enabled="true">
          <FileDeletions>
            <FileDeletion FileName="*.*" />
          </FileDeletions>
        </LanCleaner>

      </Modules>
      <ReportEmail>
        <IT_Success></IT_Success>
        <IT_Failure></IT_Failure>
        <ClientSuccess></ClientSuccess>
        <ClientFailure></ClientFailure>
        <SubjectSuccess>%DefaultSettings.ProcessName% COMPLETED</SubjectSuccess>
        <SubjectFailure>%DefaultSettings.ProcessName% ERROR</SubjectFailure>
      </ReportEmail>
    </Process>

    <Process Name="EXPORT_PRODUCT" Enabled="true">
      <LogCategory Name="%DefaultSettings.ProcessName%">
        <Appender xsi:type="RollingFileAppenderConfiguration" FileName="Rpt - %DefaultSettings.ProcessName%.log" />
      </LogCategory>
      <Exception>
        <Application>WFM</Application>
        <Environment>%ApplicationVariables.Environment%</Environment>
        <ExceptionCode>29999</ExceptionCode>
        <StatusCode>1</StatusCode>
        <SeverityCode>3</SeverityCode>
      </Exception>
      <TempFileDirectory>%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\</TempFileDirectory>
      <Modules>
        
        <Database Name="DatabaseModule">
          <Commands>

            <!--Gather all options for a specific product id.-->
            <Command RunIndex="1" Name="OptionCommand" Type="TEXT"	Enabled="true"
                     Text="
                           SELECT po.ProductId,
                                  po.OptionId,
                                  po.ProductOptionTypeId,
                                  po.IsRequired,
                                  po.[Sid],
                                  po.PersistenceVersion,
                                  po.[Hidden],
                                  o.InternalName,
                                  o.ShortLabel,
                                  o.LongLabel,
                                  o.PresentationName,
                                  o.ChoiceId,
                                  o.IsSampleable,
                                  o.ActiveFlag,
                                  o.EDILabel,
                                  o.IsInternalOnly,
                                  o.PrintableLabel,
                                  (SELECT SUBSTRING((SELECT ',' + t.TagValue AS 'data()'
                                     FROM (SELECT t.TagValue
                                             FROM [dbo].[Options] oo,
                                                  [dbo].[OptionTags] oot,
                                                  [dbo].[Tags] t
                                            WHERE o.OptionId = oo.OptionId
                                              AND oot.OptionId = oo.OptionId   
                                              AND t.TagId = oot.TagId) t
                                          FOR XML PATH('')), 2 , 9999)) AS Tags
                             FROM [dbo].[ProductOptions] po,
                                  [dbo].[Options] o
                            WHERE po.ProductId = %DefaultSettings.Arg1%
                              AND o.OptionId = po.OptionId"	>
              <Reader>OptionList</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>

            <!--Gather all choices for each top level option.-->
            <Command RunIndex="2" Name="ChoiceCommand" Type="TEXT"	Enabled="true"
                     Text="
                           SELECT  c.ChoiceId,
                                   c.InternalName AS ChoiceInternalName,
                                   c.OptionId,
                                   o.InternalName AS OptionInternalName,
                                   c.ShortLabel,
                                   c.LongLabel,
                                   c.MediaId,
                                   c.ChoiceDataType,
                                   c.SequenceNumber,
                                   c.IsDefault,
                                   c.IsSampleable,
                                   c.IsAvailable,
                                   c.ActiveFlag,
                                   c.EDILabel,
                                   c.PrintableLabel,
                                   c.BackOrderDate,
                                   (SELECT SUBSTRING((SELECT ',' + t.TagValue AS 'data()'
                                      FROM (SELECT t.TagValue
                                              FROM [dbo].[Choices] cc,
                                                   [dbo].[ChoiceTags] ct,
                                                   [dbo].[Tags] t
                                             WHERE cc.ChoiceId = c.ChoiceId	
                                               AND ct.ChoiceId = cc.ChoiceId   
                                               AND t.TagId = ct.TagId) t
                                           FOR XML PATH('')), 2 , 9999)
                                   ) AS Tags
                              FROM [dbo].[Options] o,
                                   [dbo].[Choices] c
                             WHERE 1=1
                               AND o.OptionId = %OptionList.OptionId%
                               AND c.OptionId = o.OptionId"	>
              <DrivingModule Name="OptionList">
                <Filter Expression="ChoiceId IS NULL"  />
              </DrivingModule>
              <Reader>ChoiceList</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
          </Commands>
        </Database>
        
        <!--Dump all data to Excel extract-->
        <ExcelWriter Name="Extract" TemplateName="%ApplicationVariables.ExcelTemplateDirectory%%DefaultSettings.ProcessName%.xls" FileName="Option %DefaultSettings.Arg1% Extract - %DefaultSettings.StartDate|MM-dd-yyyy HH.mm%.xls" AllowEmptyReport="true" Method="disk" Enabled="true">
          <Worksheets>
            <Worksheet SheetNumber="0" AutoFitColumns="true" StartColumn="A" StartRow="2" IgnoreContent="false">
              <SourceDataTable Name="OptionList" />
            </Worksheet>
            <Worksheet SheetNumber="1" AutoFitColumns="true" StartColumn="A" StartRow="2" IgnoreContent="false">
              <SourceDataTable Name="ChoiceList" />
            </Worksheet>
          </Worksheets>
        </ExcelWriter>
        
        <!--Email extract to user-->
        <EmailPoster Name="Emailer" Enabled="false">
          <SendEmail>true</SendEmail>
          <To>eric_j_schall@homedepot.com</To>
          <From>honeycomb@schalltech.com</From>
          <Subject>Option Extract</Subject>
          <Body>Please see attached.</Body>
          <Attachment Name="%Extract.FileName%" Path="%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\"/>
        </EmailPoster>
        
        <LanPoster Name="LoadedFiles" Enabled="False">
          <DrivingModule Name="FileCollector"/>
          <FileName>%FileCollector.FileName%</FileName>
          <Destinations>
            <Destination Path="%ApplicationVariables.ServicesPath%%DefaultSettings.ProcessName%\Loaded" NewFileName="%FileCollector.FileNameWithoutExtension%-%DefaultSettings.CurrentDate|yyyyMMddhhmmss%%FileCollector.FileExtension%"/>
          </Destinations>
        </LanPoster> 

        <LanCleaner Name="Cleanup" Enabled="False">
          <FileDeletions>
            <FileDeletion FileName="*.*" />
          </FileDeletions>
        </LanCleaner>

      </Modules>
      <ReportEmail>
        <IT_Success></IT_Success>
        <IT_Failure></IT_Failure>
        <ClientSuccess></ClientSuccess>
        <ClientFailure></ClientFailure>
        <SubjectSuccess>%DefaultSettings.ProcessName% COMPLETED</SubjectSuccess>
        <SubjectFailure>%DefaultSettings.ProcessName% ERROR</SubjectFailure>
      </ReportEmail>
    </Process>

    <Process Name="IMPORT_PRODUCT" Enabled="true">
      <LogCategory Name="%DefaultSettings.ProcessName%">
        <Appender xsi:type="RollingFileAppenderConfiguration" FileName="Rpt - %DefaultSettings.ProcessName%.log" />
      </LogCategory>
      <Exception>
        <Application>WFM</Application>
        <Environment>%ApplicationVariables.Environment%</Environment>
        <ExceptionCode>29999</ExceptionCode>
        <StatusCode>1</StatusCode>
        <SeverityCode>3</SeverityCode>
      </Exception>
      <TempFileDirectory>%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\</TempFileDirectory>
      <Modules>

        <!--Collect the import file-->
        <LanCollector Name="FileCollector" Directory="%ApplicationVariables.ServicesPath%%DefaultSettings.ProcessName%\Pending" MaxCount="1" Enabled="true">
          <SourceFiles>
            <SourceFile Name="*.xls" Unzip="true"/>
          </SourceFiles>
        </LanCollector>
        
        <!--Load the option spreadsheet-->
        <ExcelReader Name="OptionList" PageIndex="0" Enabled="true">
          <File Name="%FileCollector.FileName%" />
        </ExcelReader>

        <!--Load the choice spreadsheet-->
        <ExcelReader Name="ChoiceList" PageIndex="1" Enabled="true">
          <File Name="%FileCollector.FileName%" />
        </ExcelReader>

        <!--Create a list of option internal names that are a match between the extract and the database-->
        <Database Name="DatabaseModule" Enabled="true">
          <Commands>
            <Command RunIndex="1" Name="Command1" Type="TEXT"	Text="SELECT InternalName FROM dbo.Options WHERE InternalName IN(%OptionList.InternalName[',']%)" GoToModuleOnNoData="" Enabled="true">
              <Reader>ExistingOptions</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
          </Commands>
        </Database>
        
        <!--Update existing top level options with imported data-->
        <RestService Name="UpdateTopLevelOption" Verb="POST" Enabled="false">

          <DrivingModule Name="OptionList">
            <Filter Expression="InternalName IN(%ExistingOptions.InternalName[',']%)"/>
          </DrivingModule>

          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/EditTopLevelOption</Endpoint>
          <Parameters>
            <Parameter Name="TopLevelOptionId" DataType="body" Value="%OptionList.OptionId%"/>
            <Parameter Name="InternalName"     DataType="body" Value="%OptionList.InternalName%"/>
            <Parameter Name="ShortLabel"       DataType="body" Value="%OptionList.ShortLabel%"/>
            <Parameter Name="LongLabel"        DataType="body" Value="%OptionList.LongLabel%"/>
            <Parameter Name="EDILabel"         DataType="body" Value="%OptionList.EDILabel%"/>
            <Parameter Name="PrintableLabel"   DataType="body" Value="%OptionList.PrintableLabel%"/>
            <Parameter Name="PresentationName" DataType="body" Value="%OptionList.PresentationName%"/>
            <Parameter Name="IsSampleable"     DataType="body" Value="%OptionList.IsSampleable%"/>
            <Parameter Name="IsInternalOnly"   DataType="body" Value="%OptionList.IsInternalOnly%"/>
            <Parameter Name="Tags"             DataType="body" Value=""/>
          </Parameters>
        </RestService>
        
        <!--Create new top level options and capture their ids-->
        <RestService Name="CreateTopLevelOption" Verb="POST" Enabled="false">

          <!--Filter out existing top level options from the list-->
          <DrivingModule Name="OptionList">
            <Filter Expression="InternalName NOT IN (%ExistingOptions.InternalName[',']%)"  />
          </DrivingModule>

          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/CreateTopLevelOption</Endpoint>
          <Parameters>
            <Parameter Name="InternalName"     DataType="body" Value="%OptionList.InternalName%"/>
            <Parameter Name="ShortLabel"       DataType="body" Value="%OptionList.ShortLabel%"/>
            <Parameter Name="VendorLabel"      DataType="body" Value=""/>
            <Parameter Name="PresentationName" DataType="body" Value="%OptionList.PresentationName%"/>
            <Parameter Name="EDILabel"         DataType="body" Value="%OptionList.EDILabel%"/>
            <Parameter Name="PrintableLabel"   DataType="body" Value="%OptionList.PrintableLabel%"/>
            <Parameter Name="LongLabel"        DataType="body" Value="%OptionList.LongLabel%"/>
            <Parameter Name="IsSampleable"     DataType="body" Value="%OptionList.IsSampleable%"/>
            <Parameter Name="IsInternalOnly"   DataType="body" Value="%OptionList.IsInternalOnly%"/>
            <Parameter Name="Tags"             DataType="body" Value=""/>
          </Parameters>
        </RestService>

        <!--Create a list of option internal names that are not associated with the product in the database-->
        <!--<Database Name="DatabaseModule" Enabled="true">
          <Commands>
            <Command RunIndex="1" Name="Command1" Type="TEXT"	Text="SELECT InternalName FROM dbo.Options WHERE InternalName IN(%OptionList.InternalName[',']%)" GoToModuleOnNoData="" Enabled="true">
              <Reader>ExistingOptions</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
          </Commands>
        </Database>-->

        <!--Associate top level options with product-->
        <RestService Name="AssociateTopLevelOption" Enabled="true">

          <!--FILTER OUT EXISTING TOP LEVEL OPTIONS-->
          <DrivingModule Name="OptionList">
            <Join PrimaryKey="" ForeignKey="" NewTableName="">
              <DataTable Name=""></DataTable>
            </Join>
            <Filter Expression="InternalName NOT IN (%ExistingOptions.InternalName[',']%)"  />
          </DrivingModule>

          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/AssociateOptionWithProduct</Endpoint>
          <Parameters>
            <Parameter Name="OptionId"     DataType="body" Value="%CreateTopLevelOption.Response%">
              <Path>Id</Path>
            </Parameter>
            <Parameter Name="productId"    DataType="body" Value="%OptionList.PRODUCT_ID%"/>
            <Parameter Name="OptionName"   DataType="body" Value="%OptionList.InternalName%"/>
          </Parameters>
        </RestService>

        <!--Create a list of choice internal names that are a match between the extract and the database
            * The resulting list will contain all choices referenced in the import that already exist in the database-->
        <Database Name="DatabaseModule" Enabled="false">
          <Commands>
            <Command RunIndex="1" Name="Command1" Type="TEXT"	Text="SELECT InternalName FROM dbo.Choices WHERE InternalName IN(%ChoiceList.ChoiceInternalName[',']%)" Enabled="true">
              <Reader>ExistingChoices</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
          </Commands>
        </Database>
        
        <!--Update existing top level choices with imported data-->
        <RestService Name="UpdateTopLevelChoice" Verb="POST" Enabled="false">

          <DrivingModule Name="ChoiceList">
            <Filter Expression="ChoiceInternalName IN(%ExistingChoices.InternalName[',']%)"/>
          </DrivingModule>

          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/EditChoiceForTopLevelOption</Endpoint>
          <Parameters>
            <Parameter Name="TopLevelOptionId" DataType="body" Value="%ChoiceList.OptionId%"/>
            <Parameter Name="InternalName"     DataType="body" Value="%ChoiceList.ChoiceInternalName%"/>
            <Parameter Name="ShortLabel"       DataType="body" Value="%ChoiceList.ShortLabel%"/>
            <Parameter Name="EDILabel"         DataType="body" Value="%ChoiceList.EDILabel%"/>
            <Parameter Name="PrintableLabel"   DataType="body" Value="%ChoiceList.PrintableLabel%"/>
            <Parameter Name="LongLabel"        DataType="body" Value="%ChoiceList.LongLabel%"/>
            <Parameter Name="ChoiceId"         DataType="body" Value="%ChoiceList.ChoiceId%"/>
            <Parameter Name="MediaId"          DataType="body" Value="%ChoiceList.MediaId%"/>
            <Parameter Name="Tags"             DataType="body" Value=""/>
          </Parameters>
        </RestService>

        <!--Create new top level options and capture their ids-->
        <RestService Name="CreateTopLevelChoice" Verb="POST" Enabled="false">

          <DrivingModule Name="ChoiceList">
            <Filter Expression="ChoiceInternalName NOT IN(%ExistingChoices.InternalName[',']%)"/>
          </DrivingModule>

          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/CreateChoiceForTopLevelOption</Endpoint>
          <Parameters>            
            <Parameter Name="InternalName"     DataType="body" Value="%OptionList.InternalName%"/>
            <Parameter Name="ShortLabel"       DataType="body" Value="%OptionList.ShortLabel%"/>
            <Parameter Name="LongLabel"        DataType="body" Value="%OptionList.LongLabel%"/>
            <Parameter Name="EDILabel"         DataType="body" Value="%OptionList.EDILabel%"/>
            <Parameter Name="PrintableLabel"   DataType="body" Value="%OptionList.PrintableLabel%"/>
            <Parameter Name="MediaId"          DataType="body" Value="%OptionList.MediaId%"/>            
            <Parameter Name="DataType"         DataType="body" Value="%OptionList.DataType%"/>
            <Parameter Name="Tags"             DataType="body" Value=""/>
            <Parameter Name="TopLevelOptionId" DataType="body" Value="%OptionList.TopLevelOptionId%"/>
          </Parameters>
        </RestService>
        
        <!--Email notification to user-->
        <!--<EmailPoster Name="Emailer" Enabled="false">
          <SendEmail>true</SendEmail>
          <To>eric_j_schall@homedepot.com</To>
          <From>honeycomb@schalltech.com</From>
          <Subject>Option Extract</Subject>
          <Body>Please see attached.</Body>
          <Attachment Name="%Extract.FileName%" Path="%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\"/>
        </EmailPoster>-->

        <LanPoster Name="LoadedFiles" Enabled="true">
          <DrivingModule Name="FileCollector"/>
          <FileName>%FileCollector.FileName%</FileName>
          <Destinations>
            <Destination Path="%ApplicationVariables.ServicesPath%%DefaultSettings.ProcessName%\Loaded" NewFileName="%FileCollector.FileNameWithoutExtension%-%DefaultSettings.CurrentDate|yyyyMMddhhmmss%%FileCollector.FileExtension%"/>
          </Destinations>
        </LanPoster>

        <LanCleaner Name="Cleanup" Enabled="true">
          <FileDeletions>
            <FileDeletion FileName="*.*" />
          </FileDeletions>
        </LanCleaner>

      </Modules>
      <ReportEmail>
        <IT_Success></IT_Success>
        <IT_Failure></IT_Failure>
        <ClientSuccess></ClientSuccess>
        <ClientFailure></ClientFailure>
        <SubjectSuccess>%DefaultSettings.ProcessName% COMPLETED</SubjectSuccess>
        <SubjectFailure>%DefaultSettings.ProcessName% ERROR</SubjectFailure>
      </ReportEmail>
    </Process>
    
    
    
    <Process Name="PRODUCT_IMPORT"	Enabled="true">
      <LogCategory Name="%DefaultSettings.ProcessName%">
        <Appender xsi:type="RollingFileAppenderConfiguration" FileName="Rpt - %DefaultSettings.ProcessName%.log" />
      </LogCategory>
      <Exception>
        <Application>WFM</Application>
        <Environment>%ApplicationVariables.Environment%</Environment>
        <ExceptionCode>29999</ExceptionCode>
        <StatusCode>1</StatusCode>
        <SeverityCode>3</SeverityCode>
      </Exception>
      <TempFileDirectory>%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\</TempFileDirectory>
      <Modules>

        <!--COLLECT NEXT FILE TO BE PROCESSED FROM PENDING FOLDER-->
        <LanCollector Name="FileCollector" Directory="%ApplicationVariables.ServicesPath%%DefaultSettings.ProcessName%\Pending" MaxCount="1" Enabled="true">
          <SourceFiles>
            <SourceFile Name="*.xls" Unzip="true"/>
          </SourceFiles>
        </LanCollector>

        <!--READ TOP LEVEL OPTION EXCEL TAB INTO MEMORY-->
        <ExcelReader Name="NewTopOptionData" PageIndex="5" Enabled="true">
          <File Name="%FileCollector.FileName%" />
        </ExcelReader>

        <!-- Determine if any of the specified options already exist in the system. Add existing options to a separate list. -->
        <Database Name="DatabaseModuleExample">
          <Commands>            
            <Command RunIndex="1" Name="Command1" Type="TEXT"	Text="SELECT * FROM dbo.Options WHERE InternalName IN(%NewTopOptionData.InternalName[',']%)"	Enabled="true">
              <Reader>ExistingTopLevelOptions</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
          </Commands>
        </Database>
        
        <!--CREATE TOP LEVEL OPTIONS AND CAPTURE THEIR ID'S-->
        <RestService Name="CreateTopLevelOption" Verb="POST" Enabled="true">
          
          <!--FILTER OUT EXISTING TOP LEVEL OPTIONS-->
          <DrivingModule Name="NewTopOptionData">
            <Filter Expression="InternalName NOT IN (%ExistingTopLevelOptions.InternalName[',']%)"  />
          </DrivingModule>
          
          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/CreateTopLevelOption</Endpoint>
          <Parameters>
            <Parameter Name="InternalName"     DataType="body" Value="%NewTopOptionData.InternalName%"/>
            <Parameter Name="ShortLabel"       DataType="body" Value="%NewTopOptionData.ShortLabel%"/>
            <Parameter Name="VendorLabel"      DataType="body" Value="%NewTopOptionData.PresentationName%"/>
            <Parameter Name="PresentationName" DataType="body" Value="%NewTopOptionData.PresentationName%"/>
            <Parameter Name="EDILabel"         DataType="body" Value="%NewTopOptionData.EDILabel%"/>
            <Parameter Name="PrintableLabel"   DataType="body" Value="%NewTopOptionData.PrintableLabel%"/>
            <Parameter Name="LongLabel"        DataType="body" Value="%NewTopOptionData.LongLabel%"/>
            <Parameter Name="IsSampleable"     DataType="body" Value="false"/>
            <Parameter Name="IsInternalOnly"   DataType="body" Value="false"/>
            <Parameter Name="Tags"             DataType="body" Value=""/>
          </Parameters>
        </RestService>
        
        <!--ASSOCIATE TOP LEVEL OPTIONS WITH PRODUCT-->
        <RestService Name="AssociateTopLevelOption" Enabled="False">
          
          <!--REFERENCE TABLE CONTAINING NEWLY CREATED OPTION IDS-->
          <DrivingModule Name="CreateTopLevelOption"/>
          
          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/AssociateOptionWithProduct</Endpoint>
          <Parameters>
            <Parameter Name="OptionId"     DataType="body" Value="%CreateTopLevelOption.Response.ID%"/>
            <Parameter Name="productId"    DataType="body" Value="538458"/>
            
            <!--Is this really needed?-->
            <Parameter Name="OptionName"   DataType="body" Value=""/> 
          </Parameters>
        </RestService>

        <!--UPDATE EXISTING TOP LEVEL OPTIONS-->
        <RestService Name="UpdateTopLevelOption" Enabled="False">
          
          <DrivingModule Name="ExistingTopLevelOptions" />
          
          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/EditTopLevelOption</Endpoint>
          <Parameters>
            <Parameter Name="TopLevelOptionId" DataType="body" Value="%ExistingTopLevelOptions.InternalName%"/>            
            <Parameter Name="InternalName"     DataType="body" Value="%ExistingTopLevelOptions.InternalName%"/>
            <Parameter Name="ShortLabel"       DataType="body" Value="%ExistingTopLevelOptions.ShortLabel%"/>
            <Parameter Name="LongLabel"        DataType="body" Value="%ExistingTopLevelOptions.LongLabel%"/>
            <Parameter Name="EDILabel"         DataType="body" Value="%ExistingTopLevelOptions.EDILabel%"/>
            <Parameter Name="PrintableLabel"   DataType="body" Value="%ExistingTopLevelOptions.PrintableLabel%"/>
            <Parameter Name="PresentationName" DataType="body" Value="%ExistingTopLevelOptions.PresentationName%"/>
            <Parameter Name="IsSampleable"     DataType="body" Value="false"/>
            <Parameter Name="IsInternalOnly"   DataType="body" Value="false"/>
            <Parameter Name="Tags"             DataType="body" Value=""/>
          </Parameters>
        </RestService>
        
        <!--UPDATE TOP LEVEL CHOICE EXCEL TAB WITH NEW OPTION ID-->
        
        <!--READ TOP LEVEL CHOICE EXCEL TAB INTO MEMORY-->
        
        <!--CREATE TOP LEVEL CHOICES AND CAPTURE THEIR ID'S-->
        <RestService Name="CreateTopLevelChoice" Enabled="False">
          <DrivingModule Name="NewTopOptionData"/>
          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/CreateTopLevelOption</Endpoint>
          <Parameters>
            <Parameter Name="InternalName"     DataType="body" Value="%ImportData.InternalName%"/>
            <Parameter Name="ShortLabel"       DataType="body" Value="%ImportData.ShortLabel%"/>
            <Parameter Name="VendorLabel"      DataType="body" Value="%ImportData.PresentationName%"/>
            <Parameter Name="PresentationName" DataType="body" Value="%ImportData.PresentationName%"/>
            <Parameter Name="EDILabel"         DataType="body" Value="%ImportData.EDILabel%"/>
            <Parameter Name="PrintableLabel"   DataType="body" Value="%ImportData.PrintableLabel%"/>
            <Parameter Name="LongLabel"        DataType="body" Value="%ImportData.LongLabel%"/>
            <Parameter Name="IsSampleable"     DataType="body" Value="false"/>
            <Parameter Name="IsInternalOnly"   DataType="body" Value="false"/>
            <Parameter Name="Tags"             DataType="body" Value=""/>
          </Parameters>
        </RestService>

        <ExcelReader Name="ExistingTopOptionData" PageIndex="4" Enabled="False">
          <File Name="%FileCollector.FileName%" />
        </ExcelReader>
        
        <RestService Name="EditTopLevelOption" Verb="Post" Enabled="False">
          <DrivingModule Name="ExistingTopOptionData"/>
          <Endpoint>http://qa1.admin.blinds.com/OptionAndRulesManagement/OptionManagement/EditTopLevelOption</Endpoint>
          <Parameters>
            <Parameter Name="TopLevelOptionId"  Value="%ExistingTopOptionData.Id%"/>
            <Parameter Name="InternalName"      Value="%ExistingTopOptionData.InternalName%"/>
            <Parameter Name="ShortLabel"        Value="%ExistingTopOptionData.ShortLabel%"/>
            <Parameter Name="LongLabel"         Value="%ExistingTopOptionData.LongLabel%"/>
            <Parameter Name="EDILabel"          Value="%ExistingTopOptionData.EDILabel%"/>
            <Parameter Name="PrintableLabel"    Value="%ExistingTopOptionData.PrintableLabel%"/>
            <Parameter Name="PresentationName"  Value="%ExistingTopOptionData.PresentationName%"/>
            <Parameter Name="IsSampleable"      Value="false"/>
            <Parameter Name="IsInternalOnly"    Value="false"/>
            <Parameter Name="Tags"              Value=""/>
          </Parameters>
        </RestService>

        <!--MOVE THE PROCESSED IMPORT FILE TO THE LOADED FOLDER-->
        <LanPoster Name="LoadedFiles" Enabled="True">
          <DrivingModule Name="FileCollector"/>
          <FileName>%FileCollector.FileName%</FileName>
          <Destinations>
            <Destination Path="%ApplicationVariables.ServicesPath%%DefaultSettings.ProcessName%\Loaded" NewFileName="%FileCollector.FileNameWithoutExtension%-%DefaultSettings.CurrentDate|yyyyMMddhhmmss%%FileCollector.FileExtension%"/>
          </Destinations>
        </LanPoster>

        <!--REMOVE THE PROCESS FILE FROM THE PENDING FOLDER AND CLEAN UP THE PROCESSES TEMP FOLDER-->
        <LanCleaner Name="Cleanup" Enabled="true">
          <FileDeletions>
            <FileDeletion FileName="*.*" />
          </FileDeletions>
        </LanCleaner>
        
      </Modules>
      <ReportEmail>
        <IT_Success></IT_Success>
        <IT_Failure></IT_Failure>
        <ClientSuccess></ClientSuccess>
        <ClientFailure></ClientFailure>
        <SubjectSuccess>%DefaultSettings.ProcessName% COMPLETED</SubjectSuccess>
        <SubjectFailure>%DefaultSettings.ProcessName% ERROR</SubjectFailure>
      </ReportEmail>
    </Process>
    
    <Process Name="WFM_TEST"	Enabled="true">
      <LogCategory Name="%DefaultSettings.ProcessName%">
        <Appender xsi:type="RollingFileAppenderConfiguration" FileName="Rpt - %DefaultSettings.ProcessName%.log" />
      </LogCategory>
      <Exception>
        <Application>WFM</Application>
        <Environment>%ApplicationVariables.Environment%</Environment>
        <ExceptionCode>29999</ExceptionCode>
        <StatusCode>1</StatusCode>
        <SeverityCode>3</SeverityCode>
      </Exception>
      <TempFileDirectory>%ApplicationVariables.TempFileDirectory%%DefaultSettings.ProcessName%\%DefaultSettings.ProcessType%\</TempFileDirectory>
      <Modules>

        <LanCollector Name="VendorCollector" Directory="%ApplicationVariables.LocalPath%" Enabled="true">
          <SourceFiles>
            <SourceFile Name="*.xls" Unzip="true"/>
          </SourceFiles>
        </LanCollector>
        
        <!--<ExcelReader Name="OnCallList" PageIndex="0">
          <File Name="%VendorCollector.FileName%" />
          --><!--<DrivingModule>VendorCollector</DrivingModule>--><!--
        </ExcelReader>-->

        <RestService Name="SetOptions">
          <Endpoint>http://google.com</Endpoint>
          <SourceModule>OnCallList</SourceModule>
        </RestService>
        
        <!--Example of retrieving data from a database module.-->
        <Database Name="DatabaseModuleExample">
          <Commands>

            <!--Example a a sql query command.-->
            <Command RunIndex="1" Name="Cabals" Type="TEXT"	Text="SELECT * FROM APP_CONFIG_APPLICATION"	Enabled="true">
              <Reader>Document</Reader>
              <Connection Type="MSSQL" String="%ApplicationVariables.GCC_MSSQL_DB%"/>
            </Command>
            
          </Commands>
        </Database>

        <!--Example of an Excel Writer module creating a report based on the database module example.-->
        <ExcelWriter Name="EWriter" TemplateName="%ApplicationVariables.ExcelTemplateDirectory%Generic.xls" FileName="Cabal Report - %DefaultSettings.StartDate|MM-dd-yyyy HH.mm%.xls" AllowEmptyReport="true" Method="disk">
          <Worksheets>
            <Worksheet SheetNumber="0" AutoFitColumns="false" StartColumn="A" StartRow="4" IgnoreContent="false">
              <SourceDataTable Name="Document" />
            </Worksheet>
          </Worksheets>
        </ExcelWriter>

      </Modules>
      <ReportEmail>
        <IT_Success></IT_Success>
        <IT_Failure></IT_Failure>
        <ClientSuccess></ClientSuccess>
        <ClientFailure></ClientFailure>
        <SubjectSuccess>%DefaultSettings.ProcessName% COMPLETED</SubjectSuccess>
        <SubjectFailure>%DefaultSettings.ProcessName% ERROR</SubjectFailure>
      </ReportEmail>
    </Process>
    
    <!--2.	Option creation and maintenance – Medium
        a.	Problem: Currently to create an option, you must create the question (option) and each subsequent choice, sub-option and sub-choice individually, waiting for the screen to load and refresh for every single entry. This is also true when editing any choices. For example, if you need to add a choice tag to all the choices, you must click edit on every choice, add the tag, save and wait for the screen to load and refresh.
        b.	Proposed solution: I would like to have the ability to add or edit several choices at one time.-->

  </Processes>
</Manager>